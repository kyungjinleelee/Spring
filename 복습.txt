8/29 복습
1. 의존성 주입 ( dependency injection : DI ) ==> 1:1

    A빈 -----------> B빈  ( A has a B )

   이전: A빈에서 직접 B빈을 생성
       
        B b = new B();

        A a  = new A(b); // 생성자 이용
        A a  = new A();
	a.setB(b);       // set메서드 이용
	a.b=b;           // 직접 변수 접근

   스프링: 외부에서 생성된 B빈을 A빈에 주입

      가. 생성자 이용
         <constructor-arg name="생성자의 파라미터변수명" value="값" />
	 <constructor-arg name="생성자의 파라미터변수명" ref="값" />
	  또는
	 <bean  id="" class=""   c:생성자의파라미터변수명="값" />
	 <bean  id="" class=""   c:생성자의파라미터변수명-ref="값" />

      나. set메서드 이용
         <property name="set메서드명"  value="값" />
	 <property name="set메서드명"  ref="값" />
	 또는
	 <bean  id="" class=""   p:set메서드명="값" />
	 <bean  id="" class=""   p:set메서드명-ref="값" />

2. 의존성 주입 ( dependency injection : DI ) ==> 1: n

   가. List
           <property ~ >
               <list>
                  <value>문자열값|기본형</value>
		  <ref bean="참조형"/>
	       </list>
	   </property>
       * util namespace 이용   
        <!--  util namespace -->
	<util:list id="xxx">
	  <ref bean="c1"/>
	  <ref bean="c2"/>
	  <ref bean="c1"/>
	</util:list>


   나. Set
          <property ~ >
               <set>
                  <value>문자열값|기본형</value>
		  <ref bean="참조형"/>
	       </set>
	   </property>

	   <!--  util namespace -->
	<util:set id="xxx">
	  <ref bean="c1"/>
          <ref bean="c2"/>
          <ref bean="c1"/>
	</util:set>
   다. Map
         <property ~ >
               <map>
                  <entry key=""  value="문자열값|기본형" />
		  <entry key=""  ref="참조형" />
	       </map>
	   </property>

          <!-- util namespace -->
	<util:map id="xxx">
	   <entry key="pet01" value-ref="c1" />
           <entry key="pet02">
             <ref bean="c2"/>
           </entry>
	</util:map>

   라. Properties
         <property ~ >
               <props>
                  <prop key="">문자열값|기본형</prop>
		  <prop key="">문자열값|기본형</prop>
	       </props>
	 </property>

	 또는
	 <!-- util namespace -->
	<util:properties id="xxx">
	  <prop key="phone1">01032145698</prop>
          <prop key="phone2">01098765432</prop>
	</util:properties>

 여기까지 명시적인 의존성 주입 방법이다. (1:1, 1:n)
######################################################################
8/30 
리뷰
1. 빈의 life cycle관련된 콜백 메서드
  
  가. <bean init-method="메서드명(aaa)"  destroy-method="메서드명(bbb)" >
     ==> 빈이 생성된후(생성자 호출후) aaa() 호출된다.
         빈이 삭제될 때 bbb() 호출된다.
     ==> aaa()메서드에서는 초기화 작업이 가능하고 
         bbb()메서드에서는 자원 반납같은 close 작업이 가능하다.

  나. InitialzingBean, DisposableBean 인터페이스 이용
     ==> 빈 implements InitialzingBean, DisposableBean
     ==> afterPropertiesSet() 초기화 작업이 가능하고 
         destroy() 자원 반납같은 close 작업이 가능하다.

  다. @PostConstruct, @PreDestroy 어노테이션 이용
     ==>  @PostConstruct
          public void aaa(){
	    //초기화 작업
	  }
	  @PreDestroy
	  public void bbb(){
	    //자원 반납같은 close 작업
	  }
    반드시 어노테이션 활성화를 위한 <context:annotation-config /> 필요하다.

2. profile

 개념:  개발용따로
       제품용따로

3. DB 연동시 4가지 필요했는데.. jdbc.properties 사용했음.
   <context:property-placeholder location="classpath:com/config/jdbc.properties" >

4. I18N (국제화) : InternationalizatioN
  개념: 다국어
  개별언어: 파일명_국가별언어코드.properties ==> 리소스번들(resource bundle) 파일이라고 부른다.

  <bean id="messageSource"  class="ReloadableResourceBundleMessageSource">
     <property name="basename" value="classpath:com/config/파일명" />
  </bean>

  주의할 점 2가지
   가. 반드시 id="messageSource" 지정.
   나. 경로지정시 '파일명' 만 지정.

  *번들 파일 사용하는 대표적인 3가지 ==> 반드시 ApplicationContext 이용
  가. TestMain
  나. 임의의 빈에서는 implments MessageSourceAware  하고
      setMessageSource(MessageSource xxx){} 재정의하면 자동으로 MessageSource가 주입된다.
          
	  MessageSource
	       |
	  ApplicationContext   
  다. jsp

5. scope
  
  가. scope='singleton'
     - 기본
     - 빈을 한번만 생성한다.
     - 필요시 getBean()할 때 이전에 생성된 빈을 반환. ==> 따라서 하나의 빈으로 재사용한다.
     - 여러 사용자가 하나의 빈을 공유해서 사용하게 된다.

  나. scope='prototype'
     - 빈을 매번 생성한다.
     - 필요시 getBean()할 때 새롭게 객체생성해서 빈을 반환.
     - 여러 사용자가 빈을 공유 불가 ==> 자신만의 특정 데이터를 관리할 수 있다.

 100% XML 기반의 Configuration Metadata 설정방법이었다.

######################################################################
8/31
리뷰
리뷰
어노테이션 기반의 Configuration metadata 설정 + 최소한의 xml 필요 ( <context:annotation-config /> )

1. @Required
   -의존성 주입을 필수로 설정해야되는 어노테이션
   -Spring 5에서 deprecated 됨.

2. @Autowired ( 매우 중요 )
   - 일치하는 타입(type)을 찾아서 자동으로 의존성 주입을 해주는 어노테이션.
   - 사용위치 3가지
     가. 변수 ( 권장 )
     나. 생성자
     다. 메서드

   - 주의할 점:  타입으로 주입하기 때문에 동일한 타입이 여러개 존재하면 예외가 발생됨.
       해결방법 2가지
         가. @Autowired
	    @Qulifiler("주입받을id값")
  
   
         나. CoC ( Convention Over Configuration )
           @Autowired
	   클래스  변수명;  // 변수명과 동일한 id값을 가진 빈이 주입된다.

3. @Resource
  - 일치하는 이름(id값, name값)을 찾아서 자동으로 의존성 주입을 해주는 어노테이션.
  - 사용위치 3가지
     가. 변수 ( 권장 )
  - 문법:
      @Resource
      클래스  변수명;  // 변수명과 동일한 id값(name값)을 가진 빈이 주입된다.

  - javax.annotation.Resource
 
4. @Value
  - 빈의 변수에 값을 설정할 때 사용
  - 일반적으로 properties에 저장된 곳에서 값을 얻는다.

  - 문법:
         @Value("${key}")
	 String name;
   
5. 추가되는 어노테이션
  @Component
  @Controller
  @Service
  @Repository
  @AspectJ
#####################################################
